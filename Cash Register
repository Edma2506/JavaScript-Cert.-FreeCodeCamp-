<!-- Design a cash register drawer function checkCashRegister() that accepts purchase price as the first argument (price), 
payment as the second argument (cash), and cash-in-drawer (cid) as the third argument.

cid is a 2D array listing available currency.

The checkCashRegister() function should always return an object with a status key and a change key.

Return {status: "INSUFFICIENT_FUNDS", change: []} if cash-in-drawer is less than the change due, or if you cannot return the exact change.

Return {status: "CLOSED", change: [...]} with cash-in-drawer as the value for the key change if it is equal to the change due.

Otherwise, return {status: "OPEN", change: [...]}, with the change due in coins and bills, sorted in highest to lowest order, as the value of the change key.

Currency Unit	Amount
Penny	$0.01 (PENNY)
Nickel	$0.05 (NICKEL)
Dime	$0.1 (DIME)
Quarter	$0.25 (QUARTER)
Dollar	$1 (ONE)
Five Dollars	$5 (FIVE)
Ten Dollars	$10 (TEN)
Twenty Dollars	$20 (TWENTY)
One-hundred Dollars	$100 (ONE HUNDRED)
-->

//Code:

function checkCashRegister(price, cash, cid) {
  let currencyArray = [["PENNY", 0.01], ["NICKEL", 0.05], ["DIME", 0.1], ["QUARTER", 0.25], ["ONE", 1], ["FIVE", 5], ["TEN",10], ["TWENTY", 20], ["ONE HUNDRED", 100]];
  let arrayCurrency = currencyArray.reverse();
  let changeToGive = cash-price;
  const originalGive = changeToGive;
  console.log(originalGive);
  let cidSum = 0 ;
  let orderChange = 0;
  let finalChange = [];
  let noFunds = {status: "INSUFFICIENT_FUNDS", change: []};
  let close = {status: "CLOSED", change: cid};
  let open ={status: "OPEN", change: finalChange};

  cid.reverse();
  for (let i = 0 ; i < cid.length ; i++){
    cidSum = cidSum + cid[i][1];
  }
  cidSum = Math.round(cidSum*100)/100;
var result = [...arrayCurrency];
 for ( let j = 0 ; j < arrayCurrency.length ; j++){
 let returnAmount = 0 ;
 let bills = cid[j][1]/arrayCurrency[j][1];
 bills.toFixed(2);
     while (changeToGive.toFixed(2)>= arrayCurrency[j][1] && bills >=1){
      changeToGive -= arrayCurrency[j][1];
      returnAmount += arrayCurrency[j][1];
      bills -- 
    }
  if ( returnAmount > 0){
    if(returnAmount - Math.floor(returnAmount) !== 0){
      result[j][1] = returnAmount.toFixed(2)
      result[j][1] = parseFloat(result[j][1])}
      else{
        result[j][1] = returnAmount
      }
  }else{
        result[j][1] = returnAmount
      }
    
  }

for( let a= 0 ; a < cid.length ; a++){
orderChange += result[a][1]; 
}
orderChange = orderChange.toFixed(2);
console.log(cidSum);
cid.reverse();
  if(cidSum < originalGive || orderChange < originalGive){
return noFunds;
  }else if(cidSum == originalGive){
    console.log(close);
    return close;
  }else {
    for (let x = 0 ; x < result.length ; x ++){
      if(result[x][1] !== 0)
      finalChange.push(result[x]);
      }
      return open
    }
  }





checkCashRegister(19.5, 20, [["PENNY", 0.5], ["NICKEL", 0], ["DIME", 0], ["QUARTER", 0], ["ONE", 0], ["FIVE", 0], ["TEN", 0], ["TWENTY", 0], ["ONE HUNDRED", 0]])
